package com.example.androidbluetooth;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.net.ParseException;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;


public class DeviceActivity extends Activity {

	// Request codes
	static final int REQUEST_ENABLE_BT = 1;	

	static final String LOGGER_TAG = "DeviceActivity";
	String output="";
	
	Timer timer;
	TimerTask timerTask;
	final Handler tmr_handler = new Handler();
	
	// Message types
	static final int BLUETOOTH_CONNECTED = 1;
	static final int BLUETOOTH_DISCONNECTED = 2;
	static final int BLUETOOTH_RECEIVED = 3;
	
	
	Handler m_handler;
	DeviceThread m_thread;
	TextView m_deviceStatus;
	Button attdn_btn, login_btn, exit_btn;
	EditText username_EB, pw_EB;
	
	String command = "";
	
    //****************************************************************** onCreate()
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_device);
        
        m_handler = new Handler() {
        	public void handleMessage(Message msg) {
        		onMessage(msg);
        	}
        };

        
        // Configure the text views
        TextView deviceName = (TextView)findViewById(R.id.deviceName);
        attdn_btn = (Button) findViewById(R.id.attendance_btnID);               
        login_btn = (Button) findViewById(R.id.login_btnID); 
        exit_btn = (Button) findViewById(R.id.exit_btnID);
        
        m_deviceStatus = (TextView)findViewById(R.id.deviceStatus);
        
        username_EB = (EditText) findViewById(R.id.un_editText);
        pw_EB = (EditText) findViewById(R.id.pw_editText);
        
        username_EB.setText("user1");
        pw_EB.setText("admin1");
        
        m_deviceStatus.setText("Connecting........");
        attdn_btn.setEnabled(false);
 
        //***********************************************************************
        // Enable Bluetooth
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        
        if (adapter != null)   
        {
        	Log.i(LOGGER_TAG, "Found Bluetooth adapter");
        	
        	if (!adapter.isEnabled())     // checking for Bluetooth status 
        	{
        		Log.i(LOGGER_TAG, "Bluetooth disabled, launch enable intent");
        		Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        		startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
        	}
        	
        	if (adapter.isEnabled())    
        	{
        		Log.i(LOGGER_TAG, "Bluetooth enabled, find paired devices");
        		Set<BluetoothDevice> devices = adapter.getBondedDevices();     
        		
	        		if (!devices.isEmpty()) 
	        		{
	        			for (BluetoothDevice device : devices) 
	        			{
	        				Log.i(LOGGER_TAG, String.format("Found bluetooth device: name %s", device.getName()));
	        				String bt_dev_nam = device.getName();
	        				
	        				if(bt_dev_nam.equals("HC-05"))
	        				{
		        				deviceName.setText(device.getName());
		        				   // Start the Device thread
		        		        if (device != null) {
		        		        	
		        				Log.i(LOGGER_TAG, "Start new DeviceThread");
		        				m_thread = new DeviceThread(m_handler, device);
		        				m_thread.start();   	
		        		        }
	        				}

	        			}
	        		}
        	}
        }
        //********************************************************************            
        
        
        
        //======================================================================= Login Btu
        login_btn.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				
				String username = username_EB.getText().toString();
				String password = pw_EB.getText().toString();
				
				
				if( (username.equals("user1")) && (password.equals("admin1")) )
				{
					command = "@";
					attdn_btn.setEnabled(true);
					Toast.makeText(getApplicationContext(), "Login Successful", Toast.LENGTH_SHORT).show();
				}
				else if( (username.equals("user2")) && (password.equals("admin2")) )
				{
					command = "#";
					attdn_btn.setEnabled(true);
					Toast.makeText(getApplicationContext(), "Login Successful", Toast.LENGTH_SHORT).show();
				}
				else if( (username.equals("user3")) && (password.equals("admin3")) )
				{
					command = "$";
					attdn_btn.setEnabled(true);
					Toast.makeText(getApplicationContext(), "Login Successful", Toast.LENGTH_SHORT).show();
				}
				else
				{
					Toast.makeText(getApplicationContext(), "Invalid Login details", Toast.LENGTH_SHORT).show();
					attdn_btn.setEnabled(false);
				}	
				
			}
		});
        //=======================================================================================
    
        
        //======================================================================= Login Btu
        attdn_btn.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {			
				startTimer();	
				attdn_btn.setEnabled(false);
			}
		});
        //==========================================================================
        
        
        //======================================================================= exit Btu
        exit_btn.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {			
				
				stopTimer();	
				
				System.gc();
				finish();
			}
		});
        //==========================================================================
        
        
           
    }  
	/** ########################  End of OnCreate() ########################## */
	
	
	@Override
	protected void onPause() {
		super.onPause();
		stopTimer();
	}
	
	
	//############################################################################
		public void startTimer() {
			timer = new Timer();
			
			initializeTimerTask();
			
			timer.schedule(timerTask, 2000, 60000);
		}

		public void stopTimer() {
			 try { 
					if (timer != null) {
						timer.cancel();
						timer = null;
					}
					
					if (m_thread != null)
					{
					 	m_thread.cancel();
					}
				 
			     } catch (Exception e) {
				    // TODO Auto-generated catch block
				    e.printStackTrace();
				    m_deviceStatus.setText("Sorry, Paired device is not activated");
		       }
			 
		}
		
		public void stoptimertask(View v) {
			if (timer != null) {
				timer.cancel();
				timer = null;
			}
		}

		public void initializeTimerTask() {	
			timerTask = new TimerTask() {
				public void run() {
					
			tmr_handler.post(new Runnable() {
				public void run() {
					 try {   	
						if (m_thread != null)
						{
						m_thread.connect();
						m_thread.sendCommand(command);
						//show the toast	
						Toast toast = Toast.makeText(getApplicationContext(), "Sent Attendance", Toast.LENGTH_SHORT);
						toast.show();
						}
					     } catch (Exception e) {
	    				    // TODO Auto-generated catch block
	    				    e.printStackTrace();
	    				    m_deviceStatus.setText("Sorry, Paired device is not activated");
				       }
					 
				}
			});
				}
			};
		}
	//############################################################################		

	
	/////////////////////////////////////////////////////// DeviceThread Class 
	private class DeviceThread extends Thread {

		BluetoothDevice m_device;
		BluetoothSocket m_socket;
		OutputStream m_output;
		InputStream m_input;
		
		// Constructor for DeviceThread class
		DeviceThread(Handler handler, BluetoothDevice device) {
			m_handler = handler;
			m_device = device;
		}
				
		
		
		//===================================================================== run()
		public void run() {
			
			while (m_socket != null) {
				
			} //  End of while()
			
		}  //=========================================================== End of run()
		
		
		
		
		//============================================ connect()
		private void connect() {
			
			try {
		        	UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");
	     		    Log.i(LOGGER_TAG, "Create BluetoothSocket");
					m_socket = m_device.createRfcommSocketToServiceRecord(uuid); 
	        		Log.i(LOGGER_TAG, "Connect BluetoothSocket");
					m_socket.connect();                     
					Log.i(LOGGER_TAG, "Connected BluetoothSocket");
					m_handler.obtainMessage(BLUETOOTH_CONNECTED).sendToTarget();
					m_output = m_socket.getOutputStream();
					m_input = m_socket.getInputStream();
					
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				} catch (IOException e) {
					Log.e(LOGGER_TAG, String.format("Caught IOException e: %s", e.toString()));
					m_socket = null;
					m_handler.obtainMessage(BLUETOOTH_DISCONNECTED).sendToTarget();
				}
			}
		//============================================= End of connect()
		
		
		//============================================ cancel()
		public void cancel() {
			try {
				m_socket.close();
				m_handler.obtainMessage(BLUETOOTH_DISCONNECTED).sendToTarget();
			} catch (IOException e) {
				Log.e(LOGGER_TAG, String.format("Caught IOException e: %s", e.toString()));
			} finally {
				m_socket = null;
				m_handler.obtainMessage(BLUETOOTH_DISCONNECTED).sendToTarget();
			}
		}
		//============================================ End of cancel()
		
		
		//============================================== sendCommand() function
		public void sendCommand(String command) {
			try {
				m_output.write(command.getBytes());
				m_output.flush();
				m_handler.obtainMessage(BLUETOOTH_CONNECTED).sendToTarget();
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				cancel();  
				
			} catch (IOException e) {
				m_socket = null;
				m_handler.obtainMessage(BLUETOOTH_DISCONNECTED).sendToTarget();
			}
		}
		    
		public void sendBlinkCommand() {
			sendBlinkCommand(500);
		}
		
		public void sendBlinkCommand(int period) {
			String blinkCommand = "K" + String.valueOf(period) + "\n";
			sendCommand(blinkCommand);
		}
	}   
	////////////////////////////////////////////////////////////////////// End of Thread class
	

    public void onMessage(Message msg) {
    	switch (msg.what) {
    	case BLUETOOTH_CONNECTED:
    		onBluetoothConnected();
    		break;
    	case BLUETOOTH_DISCONNECTED:
    		onBluetoothDisconnected();
    		break;
    	}
    }

	@Override
	protected void onDestroy() {
		if (m_thread != null && m_thread.isAlive()) {
			m_thread.cancel();
		}
		super.onDestroy();
	}
	
	private void onBluetoothConnected() {
		m_deviceStatus.setText("Connected  :)");
	}
	
	private void onBluetoothDisconnected() {
		m_deviceStatus.setText("Disconnected  :(");
	}
	
    
}
