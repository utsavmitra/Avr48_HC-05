; #include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;//#include <prototype.h>
;#include <lcd16x1.h>
;#include <stdlib.h>
;#include <stdio.h>
;//#include<prototype.h>
;//#define INT0_PIN PIND.2         //int0 pin PD.2
;//#define INT1_PIN PIND.3         //int1 pin PD.3
;
;#define RS PORTB.0
;#define RW PORTB.1    //lcd defines
;#define EN PORTB.2
;
;
;
;
;
;
;//function to clear the lcd & start from first row first column onwards
;void clear_lcd(void)
; 0001 0015 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0001 0016        lcd_cmd(0x01);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0001 0017        //lcd_cmd(0x80);   //clear screen n start from fist line first column
; 0001 0018        lcd_cmd(0x06);     //incremental cursor
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0019 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;//lcd initialization function for 4 datalines
; void lcd_init(void)
; 0001 001D  {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 001E         delay_ms(15);               //startup delay
;PCODE: $00000016 VOL: 0
; 0001 001F                   lcd_cmd(0x03);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0020         delay_ms(5);
;PCODE: $0000001A VOL: 0
; 0001 0021                   lcd_cmd(0x03);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0022         delay_us(160);
;PCODE: $0000001E VOL: 0
; 0001 0023                   lcd_cmd(0x03);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0024         delay_us(160);
;PCODE: $00000022 VOL: 0
; 0001 0025                   lcd_cmd(0x02);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0026        delay_us(160);
;PCODE: $00000026 VOL: 0
; 0001 0027                   lcd_cmd(0x28);         //4 bit data , 5*7, 2 line..   //the abouve cmds are necessary
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0028        delay_ms(100);
;PCODE: $0000002A VOL: 0
; 0001 0029                   lcd_cmd(0x60);         // set CGRAM addr
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 002A        delay_ms(100);
;PCODE: $0000002E VOL: 0
; 0001 002B          lcd_cmd(0x0C);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 002C        delay_ms(1);
;PCODE: $00000032 VOL: 0
; 0001 002D                   lcd_cmd(0x06);       //increment cursor no shift
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 002E        delay_ms(1);
;PCODE: $00000036 VOL: 0
; 0001 002F                   lcd_cmd(0x90);       // 1st column 1st char
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0030         delay_ms(1);
;PCODE: $0000003A VOL: 0
; 0001 0031                   lcd_cmd(0x01);       //clear lcd
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0032         delay_ms(2);
;PCODE: $0000003E VOL: 0
; 0001 0033   }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;//to send lcd commands
;void lcd_cmd(unsigned char inst){
; 0001 0036 void lcd_cmd(unsigned char inst){
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0037 
; 0001 0038        unsigned char lsb=0,msb=0;
; 0001 0039         lsb=inst&0x0F;        //split msb n lsb nibbles
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;	inst -> Y+2
;	lsb -> R17
;	msb -> R16
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 003A         msb=inst>>4;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 003B         msb&=0x0F;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 003C         lsb=lsb&0X0F;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 003D         msb=msb<<4;
;PCODE: $00000054 VOL: 0
; 0001 003E         lsb=lsb<<4;
;PCODE: $00000055 VOL: 0
; 0001 003F         delay_us(500);            //busy check duration       500
;PCODE: $00000056 VOL: 0
; 0001 0040         RS=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0041         RW=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0042         EN=1;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0043         PORTD&=0x0F;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0044         PORTD|=msb;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0045         delay_us(5);         //6 nops       changed from 10u to 5u
;PCODE: $00000064 VOL: 0
; 0001 0046         EN=0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0047         delay_us(5);         //6 nops
;PCODE: $00000068 VOL: 0
; 0001 0048         EN=1;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0049         PORTD&=0x0F;        //sending lsb now
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 004A         PORTD|=lsb;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 004B         delay_us(5);         //6 nops
;PCODE: $00000072 VOL: 0
; 0001 004C         EN=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 004D      }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;//function to send data to lcd
; void lcd_data(unsigned char data1,unsigned char type)
; 0001 0051  {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0052       unsigned char lsbc,msbc,temp,a;
; 0001 0053       type=a;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	data1 -> Y+5
;	type -> Y+4
;	lsbc -> R17
;	msbc -> R16
;	temp -> R19
;	a -> R18
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0054       temp=0;lsbc=0;msbc=0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0055       msbc=data1&0xF0;      //msb n lsb split
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 0056       lsbc=data1<<4;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0057       delay_us(600);            //busy check duration       prev 600
;PCODE: $0000008C VOL: 0
; 0001 0058       RS=1;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0059       RW=0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 005A       EN=1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 005B       PORTD&=0x0F;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 005C       PORTD|=msbc;         // this being moved to the lsbbits of port instead of msb...
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 005D       delay_us(5);
;PCODE: $0000009A VOL: 0
; 0001 005E       EN=0 ;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 005F       delay_us(5);
;PCODE: $0000009E VOL: 0
; 0001 0060       EN=1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0061       PORTD&=0x0F;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0062       PORTD|=lsbc;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0063       delay_us(5);
;PCODE: $000000A8 VOL: 0
; 0001 0064       EN=0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0065 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;
;//function to put string onto lcd
;void lcd_puts(unsigned char *str)
; 0001 006A {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 006B   while(*str !='\0')
;PCODE: $000000B2 VOL: 0
;	*str -> Y+0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 006C          {
; 0001 006D            lcd_data(*str,1);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 006E              *str++;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 006F           }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 0070 }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
