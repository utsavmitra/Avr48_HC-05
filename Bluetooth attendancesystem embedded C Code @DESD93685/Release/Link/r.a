;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <string.h>
;#include <delay.h>
;#include <lcd16x1.h>
;#define button PIND.2
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;unsigned char timer_count_info1=0,timer_count_info;
;#define ADC_VREF_TYPE 0x00
;unsigned char attendance1=0,attendance2=0,attendance3=0,attendance4=0,display_atd,code;
;
;
;unsigned char card[8],msg[]="WELCOME TO CDAC",msg1[]="ATTENDANCE V1.0",msg2[]="  BLUETOOTH  ",msg3[]="  ATTENDANCE  ";

	.DSEG
;
;unsigned char r[]="Ram",a[]="Raj",b[]="Ved",c[]="Sam",d[]="Om";
;
;
;
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0<256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0030 char status,data;
; 0000 0031 status=UCSR0A;
;PCODE: $0000000E VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0032 data=UDR0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0033 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0034    {
; 0000 0035    rx_buffer0[rx_wr_index0]=data;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0036    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0037    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0038       {
; 0000 0039       rx_counter0=0;
;PCODE: $00000024 VOL: 0
; 0000 003A       rx_buffer_overflow0=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003B       };
;PCODE: $00000027 VOL: 0
; 0000 003C    };
;PCODE: $00000028 VOL: 0
; 0000 003D }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0044 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0045 char data;
; 0000 0046 while (rx_counter0==0);
;PCODE: $0000002F VOL: 0
;	data -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0047 data=rx_buffer0[rx_rd_index0];
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0048 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049 #asm("cli")
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004A --rx_counter0;
;PCODE: $00000040 VOL: 0
; 0000 004B #asm("sei")
;PCODE: $00000041 VOL: 0
; 0000 004C return data;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004D }
;PCODE: $00000045 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0<256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 005D {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005E if (tx_counter0)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005F    {
; 0000 0060    --tx_counter0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0061    UDR0=tx_buffer0[tx_rd_index0];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0062    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0063    };
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0064 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 006B {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006C while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006D #asm("cli")
;PCODE: $00000068 VOL: 0
; 0000 006E if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006F    {
; 0000 0070    tx_buffer0[tx_wr_index0]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0071    if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0072    ++tx_counter0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0073    }
; 0000 0074 else
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0075    UDR0=c;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0076 #asm("sei")
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0077 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;#pragma used-
;#endif
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 007C {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 007D // Reinitialize Timer 1 value
; 0000 007E TCNT1H=0xFE;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007F TCNT1L=0x79;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0080 //TIMSK1=0x00;
; 0000 0081 // Place your code here
; 0000 0082 timer_count_info++;
;PCODE: $0000008E VOL: 0
; 0000 0083 timer_count_info1++;
;PCODE: $0000008F VOL: 0
; 0000 0084 //  putchar('a');
; 0000 0085 //  PORTD.2=1;
; 0000 0086 //    delay_ms(100);
; 0000 0087 //    PORTD.2=0;
; 0000 0088   if (timer_count_info==800)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0089   { timer_count_info=0;
;PCODE: $00000094 VOL: 0
; 0000 008A    attendance1=0;
;PCODE: $00000095 VOL: 0
; 0000 008B    attendance2=0;
;PCODE: $00000096 VOL: 0
; 0000 008C    attendance3=0;
;PCODE: $00000097 VOL: 0
; 0000 008D    attendance4=0;
;PCODE: $00000098 VOL: 0
; 0000 008E    }
; 0000 008F 
; 0000 0090    if (timer_count_info1==800)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0091   { timer_count_info1=0;
;PCODE: $0000009E VOL: 0
; 0000 0092    attendance1=0;
;PCODE: $0000009F VOL: 0
; 0000 0093    attendance2=0;
;PCODE: $000000A0 VOL: 0
; 0000 0094    attendance3=0;
;PCODE: $000000A1 VOL: 0
; 0000 0095    attendance4=0;
;PCODE: $000000A2 VOL: 0
; 0000 0096    }
; 0000 0097 
; 0000 0098  // TIMSK1=0x01;
; 0000 0099 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 00A0 {
;PCODE: $000000A7 VOL: 0
; 0000 00A1 // Declare your local variables here
; 0000 00A2  unsigned char present[]="PRESENT",absent[]="ABSENT ";
; 0000 00A3 // Crystal Oscillator division factor: 1
; 0000 00A4 #pragma optsize-
; 0000 00A5 CLKPR=0x80;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;	present -> Y+8
;	absent -> Y+0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A6 CLKPR=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A7 #ifdef _OPTIMIZE_SIZE_
; 0000 00A8 #pragma optsize+
; 0000 00A9 #endif
; 0000 00AA 
; 0000 00AB // Input/Output Ports initialization
; 0000 00AC // Port B initialization
; 0000 00AD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00AF PORTB=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00B0 DDRB=0x07;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B1 
; 0000 00B2 // Port C initialization
; 0000 00B3 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B4 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B5 PORTC=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00B6 DDRC=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00B7 
; 0000 00B8 // Port D initialization
; 0000 00B9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BB PORTD=0x04;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00BC DDRD=0xf0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00BD 
; 0000 00BE // Timer/Counter 0 initialization
; 0000 00BF // Clock source: System Clock
; 0000 00C0 // Clock value: Timer 0 Stopped
; 0000 00C1 // Mode: Normal top=FFh
; 0000 00C2 // OC0A output: Disconnected
; 0000 00C3 // OC0B output: Disconnected
; 0000 00C4 TCCR0A=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00C5 TCCR0B=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00C6 TCNT0=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C7 OCR0A=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00C8 OCR0B=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00C9 
; 0000 00CA // Timer/Counter 1 initialization
; 0000 00CB // Clock source: System Clock
; 0000 00CC // Clock value: 3.906 kHz
; 0000 00CD // Mode: Normal top=FFFFh
; 0000 00CE // OC1A output: Discon.
; 0000 00CF // OC1B output: Discon.
; 0000 00D0 // Noise Canceler: Off
; 0000 00D1 // Input Capture on Falling Edge
; 0000 00D2 // Timer 1 Overflow Interrupt: On
; 0000 00D3 // Input Capture Interrupt: Off
; 0000 00D4 // Compare A Match Interrupt: Off
; 0000 00D5 // Compare B Match Interrupt: Off
; 0000 00D6 TCCR1A=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D7 TCCR1B=0x05;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D8 TCNT1H=0xFE;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D9 TCNT1L=0x79;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DA ICR1H=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DB ICR1L=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DC OCR1AH=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00DD OCR1AL=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00DE OCR1BH=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00DF OCR1BL=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00E0 
; 0000 00E1 // Timer/Counter 2 initialization
; 0000 00E2 // Clock source: System Clock
; 0000 00E3 // Clock value: Timer 2 Stopped
; 0000 00E4 // Mode: Normal top=FFh
; 0000 00E5 // OC2A output: Disconnected
; 0000 00E6 // OC2B output: Disconnected
; 0000 00E7 ASSR=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E8 TCCR2A=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00E9 TCCR2B=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00EA TCNT2=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00EB OCR2A=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00EC OCR2B=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00ED 
; 0000 00EE 
; 0000 00EF 
; 0000 00F0 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F1 TIMSK0=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F2 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00F3 TIMSK1=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00F4 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00F5 TIMSK2=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F6 
; 0000 00F7 // USART initialization
; 0000 00F8 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F9 // USART Receiver: On
; 0000 00FA // USART Transmitter: On
; 0000 00FB // USART0 Mode: Asynchronous
; 0000 00FC // USART Baud rate: 9600
; 0000 00FD UCSR0A=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00FE UCSR0B=0xD8;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FF UCSR0C=0x06;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0100 UBRR0H=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0101 UBRR0L=0x19;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0102 
; 0000 0103 
; 0000 0104 
; 0000 0105 
; 0000 0106 // Global enable interrupts
; 0000 0107 #asm("sei")
;PCODE: $000000F7 VOL: 0
; 0000 0108 lcd_init();
;PCODE: $000000F8 VOL: 0
; 0000 0109  clear_lcd();
;PCODE: $000000F9 VOL: 0
; 0000 010A  lcd_cmd(0x80);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 010B  lcd_puts(msg);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 010C  //delay_ms(1000);
; 0000 010D  lcd_cmd(0xC0) ;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 010E  lcd_puts(msg1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 010F  delay_ms(3000);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0110   clear_lcd();
;PCODE: $00000104 VOL: 0
; 0000 0111    lcd_cmd(0x80) ;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0112 
; 0000 0113 while (1)
;PCODE: $00000107 VOL: 0
; 0000 0114       {
; 0000 0115       // Place your code here
; 0000 0116        if(rx_counter0>0)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0117          {
; 0000 0118          code = getchar();
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0119          putchar(code);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 011A       if(code=='@')
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 011B       {  code=0;
;PCODE: $00000112 VOL: 0
; 0000 011C       attendance1=1;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 011D       timer_count_info=0;
;PCODE: $00000115 VOL: 0
; 0000 011E       TCNT1H=0xFE;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 011F       TCNT1L=0x79;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0120       TIMSK1=0x01;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0121       }
; 0000 0122 
; 0000 0123        if(code=='#')
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0124       { code=0;
;PCODE: $00000120 VOL: 0
; 0000 0125       attendance2=1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0126       timer_count_info1=0;
;PCODE: $00000123 VOL: 0
; 0000 0127       TCNT1H=0xFE;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0128       TCNT1L=0x79;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0129       TIMSK1=0x01;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 012A       }
; 0000 012B        if(code=='$')
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 012C       {
; 0000 012D       attendance3=1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 012E       timer_count_info=0;
;PCODE: $00000130 VOL: 0
; 0000 012F        TIMSK1=0x01;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0130        TCNT1H=0xFE;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0131        TCNT1L=0x79;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0132       }
; 0000 0133 
; 0000 0134        if(code=='*')
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0135       {
; 0000 0136       attendance4=1;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0137       timer_count_info=0;
;PCODE: $0000013D VOL: 0
; 0000 0138       TIMSK1=0x01;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0139       TCNT1H=0xFE;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 013A TCNT1L=0x79;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 013B       }
; 0000 013C 
; 0000 013D          }
;PCODE: $00000144 VOL: 0
; 0000 013E 
; 0000 013F //          lcd_cmd(0x80) ;
; 0000 0140 //          lcd_puts(msg2);
; 0000 0141 //          lcd_cmd(0xC0) ;
; 0000 0142 //          lcd_puts(msg3);
; 0000 0143         // if(display_atd==1)
; 0000 0144          {
;PCODE: $00000145 VOL: 0
; 0000 0145             display_atd=0;
;PCODE: $00000146 VOL: 0
; 0000 0146            if(attendance1==1)
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0147            {
; 0000 0148              lcd_cmd(0x80) ;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0149          lcd_puts(r);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 014A           lcd_data(' ',0);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 014B          lcd_data(':',0);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 014C            lcd_data(' ',0);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 014D            lcd_puts(present);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 014E 
; 0000 014F            }
; 0000 0150            else
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0151          {
; 0000 0152              lcd_cmd(0x80) ;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0153          lcd_puts(r);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0154           lcd_data(' ',0);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0155          lcd_data(':',0);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0156            lcd_data(' ',0);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0157            lcd_puts(absent);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0158 
; 0000 0159            }
;PCODE: $00000170 VOL: 0
; 0000 015A            if(attendance2==1)
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 015B            {
; 0000 015C              lcd_cmd(0xc0) ;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 015D          lcd_puts(b);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 015E           lcd_data(' ',0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 015F          lcd_data(':',0);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0160            lcd_data(' ',0);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0161            lcd_puts(present);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0162 
; 0000 0163            }
; 0000 0164            else
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0165          {
; 0000 0166              lcd_cmd(0xc0) ;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0167          lcd_puts(b);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0168           lcd_data(' ',0);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0169          lcd_data(':',0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 016A            lcd_data(' ',0);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 016B            lcd_puts(absent);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 016C 
; 0000 016D            }
;PCODE: $0000019A VOL: 0
; 0000 016E           //  delay_ms(3000);
; 0000 016F          // clear_lcd();
; 0000 0170 
; 0000 0171          }
; 0000 0172 
; 0000 0173 
; 0000 0174       };
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0175 }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;
;
