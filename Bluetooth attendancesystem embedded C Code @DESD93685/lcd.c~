 #include <mega48.h>         
//#include <prototype.h> 
#include <lcd16x1.h> 
#include <stdlib.h>
#include <stdio.h>  
//#include<prototype.h>     
//#define INT0_PIN PIND.2         //int0 pin PD.2
//#define INT1_PIN PIND.3         //int1 pin PD.3

#define RS PORTB.0
#define RW PORTB.1    //lcd defines
#define EN PORTB.2  
                        
#define ZERO_CALIBRATION_MODE 0
#define GAIN_CALIBRATION_MODE  1
#define OPERATING_MODE 2        
#define BACKLIGHT PORTB.0
    
#define LCD_CGRAM(n) (0x40 + ((n)<<3))    // set CGRAM address with line  
eeprom unsigned char dummy=0;
eeprom unsigned char ON;

//custom character declaration for Bar0,Bar1,Bar2,Bar3,Bar4,Bar5.
unsigned char CustomChar[] =
 {
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0. 0/5 BAR0
     0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,   // 1. 1/5 BAR1
     0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,   // 2. 2/5 BAR2
     0x00, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C,   // 3. 3/5 BAR3
     0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,   // 4. 4/5 BAR4
     0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F    // 5. 5/5 BAR5
 };   
 


               

//function to clear the lcd & start from first row first column onwards       
void clear_lcd(void)
{
       lcd_cmd(0x01);
       //lcd_cmd(0x80);   //clear screen n start from fist line first column
       lcd_cmd(0x06);     //incremental cursor
}

//lcd initialization function for 4 datalines    
 void lcd_init(void)
 {
        delay_ms(15);               //startup delay
                  lcd_cmd(0x03);
        delay_ms(5);     
                  lcd_cmd(0x03);
        delay_us(160);     
                  lcd_cmd(0x03);
        delay_us(160);            
                  lcd_cmd(0x02);
       delay_us(160);  
                  lcd_cmd(0x28);         //4 bit data , 5*7, 2 line..   //the abouve cmds are necessary
       delay_ms(100);                    
                  lcd_cmd(0x60);         // set CGRAM addr
       delay_ms(100);           
         lcd_cmd(0x0C); 
       delay_ms(1);                          
                  lcd_cmd(0x06);       //increment cursor no shift
       delay_ms(1);           
                  lcd_cmd(0x90);       // 1st column 1st char
        delay_ms(1);                                        
                  lcd_cmd(0x01);       //clear lcd
        delay_ms(2);                              
  }                                 

//to send lcd commands
void lcd_cmd(unsigned char inst){

       unsigned char lsb=0,msb=0;
        lsb=inst&0x0F;        //split msb n lsb nibbles
        msb=inst>>4; 
        msb&=0x0F;   
        lsb=lsb&0X0F;
        msb=msb<<4;
        lsb=lsb<<4;
        delay_us(500);            //busy check duration       500
        RS=0;
        RW=0;    
        EN=1;     
        PORTD&=0x0F; 
        PORTD|=msb; 
        delay_us(5);         //6 nops       changed from 10u to 5u
        EN=0;
        delay_us(5);         //6 nops
        EN=1;
        PORTD&=0x0F;        //sending lsb now       
        PORTD|=lsb; 
        delay_us(5);         //6 nops
        EN=0;
     }   
               
//function to send data to lcd
 void lcd_data(unsigned char data1,unsigned char type)
 {      
      unsigned char lsbc,msbc,temp,a; 
      type=a;
      temp=0;lsbc=0;msbc=0;
      msbc=data1&0xF0;      //msb n lsb split
      lsbc=data1<<4;
      delay_us(600);            //busy check duration       prev 600
      RS=1;
      RW=0;     
      EN=1;
      PORTD&=0x0F; 
      PORTD|=msbc;         // this being moved to the lsbbits of port instead of msb...
      delay_us(5);        
      EN=0 ;                   
      delay_us(5);        
      EN=1;
      PORTD&=0x0F;
      PORTD|=lsbc;        
      delay_us(5);        
      EN=0;     
} 
              

//function to put string onto lcd     
void lcd_puts(unsigned char *str)
{
  while(*str !='\0') 
         {
           lcd_data(*str,1);
             *str++;
          }
}

//clear the line of the lcd by putting blank spaces
void clear_line_lcd(unsigned char line_num)
   {
           if(line_num==1)lcd_goto(1,1);     //1st line  0x80
           else  lcd_goto(2,1);                     //2nd line  0xC0
           lcd_cmd(0x06);
          // lcd_put_nspaces(8);       //clear line 
   }     


//function to fix position on lcd 
//input1  line# 1, 2 
//input2 column# 1-16
void lcd_goto(unsigned char line , unsigned char colm)
{
    unsigned char addr;
    line--;  colm--;
    addr=(line*0x40)+colm;
    lcd_cmd(addr|0x80);
} 
   
//load lcd custom char in CGRAM.
void lcdLoadCustomChar(void)   
 {    
   unsigned char x,i=0; 
   x=LCD_CGRAM(1);
   lcd_cmd(x);    
   delay_ms(10);                                              
   for (i = 0; i < sizeof(CustomChar); i++) // bar graph address send to CGRAM
    {
        lcd_data(CustomChar[i],1);
        delay_ms(10);
    }                             
    
 }   
 
 
//function to put nspaces on lcd      
void lcd_put_nspaces(unsigned char count)
{
     while(count--)lcd_data(' ',0);
}           

//function to convert int to ascii for dispaly on lcd / serial port          
 //calculate the ascii values to be displayed on lcd  3 digit int to 3 digit ascii
void cal_ascii(unsigned int value)   
{ 
       unsigned char lb,mb,mmlb;
       mmlb=(((unsigned char)(value/100))|0x30);
       mb=(unsigned char)(value/10);  
       mb=(((unsigned char)(mb%10))|0x30);
       lb=(((unsigned char)(value%10))|0x30);
      
      if(value>99){ lcd_data(mmlb,1);lcd_data(mb,1);lcd_data(lb,1); }
      else if (value >9){lcd_data(mb,1);lcd_data(lb,1); }
      else 
      {   
      lcd_data(0x30,1);
      lcd_data(lb,1); 
      }
}                       


