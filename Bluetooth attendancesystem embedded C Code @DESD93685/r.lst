
AVRASM ver. 2.1.2  r.asm Thu Jan 25 17:03:12 2018

r.asm(992): Including file 'r.vec'
r.asm(993): Including file 'r.inc'
r.inc(2): warning: Register r2 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(3): warning: Register r3 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(4): warning: Register r4 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(5): warning: Register r5 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(6): warning: Register r6 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(7): warning: Register r7 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(8): warning: Register r8 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(9): warning: Register r9 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(10): warning: Register r10 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(11): warning: Register r11 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(12): warning: Register r12 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(13): warning: Register r13 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
r.inc(14): warning: Register r14 already defined by the .DEF directive
r.asm(993): 'r.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.24.8d Professional
                 ;(C) Copyright 1998-2006 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega48
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "r.vec"
                 
                 ;INTERRUPT VECTORS
000000 c065      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c114      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 c08c      	RJMP _usart_rx_isr
000013 cfec      	RJMP 0x00
000014 c0c7      	RJMP _usart_tx_isr
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 	.INCLUDE "r.inc"
                 
                 	.DEF _timer_count_info1=R2
                 	.DEF _timer_count_info=R3
                 	.DEF _attendance1=R4
                 	.DEF _attendance2=R5
                 	.DEF _attendance3=R6
                 	.DEF _attendance4=R7
                 	.DEF _display_atd=R8
                 	.DEF _code=R9
                 	.DEF _rx_wr_index0=R10
                 	.DEF _rx_rd_index0=R11
                 	.DEF _rx_counter0=R12
                 	.DEF _tx_wr_index0=R13
                 	.DEF _tx_rd_index0=R14
                 _0x16:
00001a 4241      	.DB  0x41,0x42
00001b 4553      	.DB  0x53,0x45
00001c 544e      	.DB  0x4E,0x54
00001d 0020      	.DB  0x20,0x0
00001e 5250      	.DB  0x50,0x52
00001f 5345      	.DB  0x45,0x53
000020 4e45      	.DB  0x45,0x4E
000021 0054      	.DB  0x54,0x0
                 _0:
000022 4557
000023 434c
000024 4d4f
000025 2045      	.DB  0x57,0x45,0x4C,0x43,0x4F,0x4D,0x45,0x20
000026 4f54
000027 4320
000028 4144
000029 0043      	.DB  0x54,0x4F,0x20,0x43,0x44,0x41,0x43,0x0
00002a 5441
00002b 4554
00002c 444e
00002d 4e41      	.DB  0x41,0x54,0x54,0x45,0x4E,0x44,0x41,0x4E
00002e 4543
00002f 5620
000030 2e31
000031 0030      	.DB  0x43,0x45,0x20,0x56,0x31,0x2E,0x30,0x0
000032 2020
000033 4c42
000034 4555
000035 4f54      	.DB  0x20,0x20,0x42,0x4C,0x55,0x45,0x54,0x4F
000036 544f
000037 2048
000038 0020
000039 2020      	.DB  0x4F,0x54,0x48,0x20,0x20,0x0,0x20,0x20
00003a 5441
00003b 4554
00003c 444e
00003d 4e41      	.DB  0x41,0x54,0x54,0x45,0x4E,0x44,0x41,0x4E
00003e 4543
00003f 2020
000040 5200
000041 6d61      	.DB  0x43,0x45,0x20,0x20,0x0,0x52,0x61,0x6D
000042 5200
000043 6a61
000044 5600
000045 6465      	.DB  0x0,0x52,0x61,0x6A,0x0,0x56,0x65,0x64
000046 5300
000047 6d61
000048 4f00
000049 006d      	.DB  0x0,0x53,0x61,0x6D,0x0,0x4F,0x6D,0x0
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 	.EQU  __GPIOR1_INIT=0x00
                 	.EQU  __GPIOR2_INIT=0x00
                 
                 __GLOBAL_INI_TBL:
00004a 0010      	.DW  0x10
00004b 0188      	.DW  _msg
00004c 0044      	.DW  _0*2
                 
00004d 0010      	.DW  0x10
00004e 0198      	.DW  _msg1
00004f 0054      	.DW  _0*2+0x10
                 
000050 000e      	.DW  0x0E
000051 01a8      	.DW  _msg2
000052 0064      	.DW  _0*2+0x20
                 
000053 000f      	.DW  0x0F
000054 01b6      	.DW  _msg3
000055 0072      	.DW  _0*2+0x2E
                 
000056 0004      	.DW  0x04
000057 01c5      	.DW  _r
000058 0081      	.DW  _0*2+0x3D
                 
000059 0004      	.DW  0x04
00005a 01c9      	.DW  _a
00005b 0085      	.DW  _0*2+0x41
                 
00005c 0004      	.DW  0x04
00005d 01cd      	.DW  _b
00005e 0089      	.DW  _0*2+0x45
                 
00005f 0004      	.DW  0x04
000060 01d1      	.DW  _c
000061 008d      	.DW  _0*2+0x49
                 
000062 0003      	.DW  0x03
000063 01d5      	.DW  _d
000064 0091      	.DW  _0*2+0x4D
                 
000065 0000      	.DW  0
                 _0x27:
                 
                 __RESET:
000066 94f8      	CLI
000067 27ee      	CLR  R30
000068 bbef      	OUT  EECR,R30
000069 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00006a e1f8      	LDI  R31,0x18
00006b 95a8      	WDR
00006c b7a4      	IN   R26,MCUSR
00006d 7fa7      	CBR  R26,8
00006e bfa4      	OUT  MCUSR,R26
00006f 93f0 0060 	STS  WDTCSR,R31
000071 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000073 e08d      	LDI  R24,13
000074 e0a2      	LDI  R26,2
000075 27bb      	CLR  R27
                 __CLEAR_REG:
000076 93ed      	ST   X+,R30
000077 958a      	DEC  R24
000078 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000079 e080      	LDI  R24,LOW(0x200)
00007a e092      	LDI  R25,HIGH(0x200)
00007b e0a0      	LDI  R26,LOW(0x100)
00007c e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000092 e0e0      	LDI  R30,__GPIOR0_INIT
000093 bbee      	OUT  GPIOR0,R30
000094 e0e0      	LDI  R30,__GPIOR1_INIT
000095 bdea      	OUT  GPIOR1,R30
000096 e0e0      	LDI  R30,__GPIOR2_INIT
000097 bdeb      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
000098 efef      	LDI  R30,LOW(0x2FF)
000099 bfed      	OUT  SPL,R30
00009a e0e2      	LDI  R30,HIGH(0x2FF)
00009b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009c e8c0      	LDI  R28,LOW(0x180)
00009d e0d1      	LDI  R29,HIGH(0x180)
                 
00009e c09d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 ;       1 #include <mega48.h>
                 ;       2 #include <string.h>
                 ;       3 #include <delay.h>
                 ;       4 #include <lcd16x1.h> 
                 ;       5 #define button PIND.2
                 ;       6 #define RXB8 1
                 ;       7 #define TXB8 0
                 ;       8 #define UPE 2
                 ;       9 #define OVR 3
                 ;      10 #define FE 4
                 ;      11 #define UDRE 5
                 ;      12 #define RXC 7
                 ;      13 
                 ;      14 #define FRAMING_ERROR (1<<FE)
                 ;      15 #define PARITY_ERROR (1<<UPE)
                 ;      16 #define DATA_OVERRUN (1<<OVR)
                 ;      17 #define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;      18 #define RX_COMPLETE (1<<RXC)
                 ;      19 unsigned char timer_count_info1=0,timer_count_info;
                 ;      20 #define ADC_VREF_TYPE 0x00
                 ;      21 unsigned char attendance1=0,attendance2=0,attendance3=0,attendance4=0,display_atd,code;
                 ;      22 
                 ;      23  
                 ;      24 unsigned char card[8],msg[]="WELCOME TO CDAC",msg1[]="ATTENDANCE V1.0",msg2[]="  BLUETOOTH  ",msg3[]="  ATTENDANCE  ";
                 _card:
000180           	.BYTE 0x8
                 _msg:
000188           	.BYTE 0x10
                 _msg1:
000198           	.BYTE 0x10
                 _msg2:
0001a8           	.BYTE 0xE
                 _msg3:
0001b6           	.BYTE 0xF
                 ;      25 
                 ;      26 unsigned char r[]="Ram",a[]="Raj",b[]="Ved",c[]="Sam",d[]="Om";
                 _r:
0001c5           	.BYTE 0x4
                 _a:
0001c9           	.BYTE 0x4
                 _b:
0001cd           	.BYTE 0x4
                 _c:
0001d1           	.BYTE 0x4
                 _d:
0001d5           	.BYTE 0x3
                 ;      27 
                 ;      28 
                 ;      29 
                 ;      30 
                 ;      31 
                 ;      32 // USART Receiver buffer
                 ;      33 #define RX_BUFFER_SIZE0 8
                 ;      34 char rx_buffer0[RX_BUFFER_SIZE0];
                 _rx_buffer0:
0001d8           	.BYTE 0x8
                 ;      35 
                 ;      36 #if RX_BUFFER_SIZE0<256
                 ;      37 unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      38 #else
                 ;      39 unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      40 #endif
                 ;      41 
                 ;      42 // This flag is set on USART Receiver buffer overflow
                 ;      43 bit rx_buffer_overflow0;
                 ;      44 
                 ;      45 // USART Receiver interrupt service routine
                 ;      46 interrupt [USART_RXC] void usart_rx_isr(void)
                 ;      47 {
                 
                 	.CSEG
                 _usart_rx_isr:
00009f 93aa      	ST   -Y,R26
0000a0 93ba      	ST   -Y,R27
0000a1 93ea      	ST   -Y,R30
0000a2 b7ef      	IN   R30,SREG
0000a3 93ea      	ST   -Y,R30
                 ;      48 char status,data;
                 ;      49 status=UCSR0A;
0000a4 d227      	RCALL __SAVELOCR2
                 ;	status -> R16
                 ;	data -> R17
0000a5 9100 00c0 	LDS  R16,192
                 ;      50 data=UDR0;
0000a7 9110 00c6 	LDS  R17,198
                 ;      51 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a9 2fe0      	MOV  R30,R16
0000aa 71ec      	ANDI R30,LOW(0x1C)
0000ab f009      	BREQ PC+2
0000ac c012      	RJMP _0x3
                 ;      52    {
                 ;      53    rx_buffer0[rx_wr_index0]=data;
0000ad 2daa      	MOV  R26,R10
0000ae e0b0      	LDI  R27,0
0000af 52a8      	SUBI R26,LOW(-_rx_buffer0)
0000b0 4fbe      	SBCI R27,HIGH(-_rx_buffer0)
0000b1 931c      	ST   X,R17
                 ;      54    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000b2 94a3      	INC  R10
0000b3 e0e8      	LDI  R30,LOW(8)
0000b4 15ea      	CP   R30,R10
0000b5 f009      	BREQ PC+2
0000b6 c001      	RJMP _0x4
0000b7 24aa      	CLR  R10
                 ;      55    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000b8 94c3      	INC  R12
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba 15ec      	CP   R30,R12
0000bb f009      	BREQ PC+2
0000bc c002      	RJMP _0x5
                 ;      56       {
                 ;      57       rx_counter0=0;
0000bd 24cc      	CLR  R12
                 ;      58       rx_buffer_overflow0=1;
0000be 9af0      	SBI  0x1E,0
                 ;      59       };
                 _0x5:
                 ;      60    };
                 _0x3:
                 ;      61 }
0000bf d214      	RCALL __LOADLOCR2P
0000c0 91e9      	LD   R30,Y+
0000c1 bfef      	OUT  SREG,R30
0000c2 91e9      	LD   R30,Y+
0000c3 91b9      	LD   R27,Y+
0000c4 91a9      	LD   R26,Y+
0000c5 9518      	RETI
                 ;      62 
                 ;      63 #ifndef _DEBUG_TERMINAL_IO_
                 ;      64 // Get a character from the USART Receiver buffer
                 ;      65 #define _ALTERNATE_GETCHAR_
                 ;      66 #pragma used+
                 ;      67 char getchar(void)
                 ;      68 {
                 _getchar:
                 ;      69 char data;
                 ;      70 while (rx_counter0==0);
0000c6 930a      	ST   -Y,R16
                 ;	data -> R16
                 _0x6:
0000c7 20cc      	TST  R12
0000c8 f009      	BREQ PC+2
0000c9 c001      	RJMP _0x8
0000ca cffc      	RJMP _0x6
                 _0x8:
                 ;      71 data=rx_buffer0[rx_rd_index0];
0000cb 2deb      	MOV  R30,R11
0000cc d194      	RCALL SUBOPT_0x0
0000cd 52e8      	SUBI R30,LOW(-_rx_buffer0)
0000ce 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000cf 8100      	LD   R16,Z
                 ;      72 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000d0 94b3      	INC  R11
0000d1 e0e8      	LDI  R30,LOW(8)
0000d2 15eb      	CP   R30,R11
0000d3 f009      	BREQ PC+2
0000d4 c001      	RJMP _0x9
0000d5 24bb      	CLR  R11
                 ;      73 #asm("cli")
                 _0x9:
0000d6 94f8      	cli
                 ;      74 --rx_counter0;
0000d7 94ca      	DEC  R12
                 ;      75 #asm("sei")
0000d8 9478      	sei
                 ;      76 return data;
0000d9 2fe0      	MOV  R30,R16
0000da 9109      	LD   R16,Y+
0000db 9508      	RET
                 ;      77 }
                 ;      78 #pragma used-
                 ;      79 #endif
                 ;      80 
                 ;      81 // USART Transmitter buffer
                 ;      82 #define TX_BUFFER_SIZE0 8
                 ;      83 char tx_buffer0[TX_BUFFER_SIZE0];
                 
                 	.DSEG
                 _tx_buffer0:
0001e0           	.BYTE 0x8
                 ;      84 
                 ;      85 #if TX_BUFFER_SIZE0<256
                 ;      86 unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 _tx_counter0:
0001e8           	.BYTE 0x1
                 ;      87 #else
                 ;      88 unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;      89 #endif
                 ;      90 
                 ;      91 // USART Transmitter interrupt service routine
                 ;      92 interrupt [USART_TXC] void usart_tx_isr(void)
                 ;      93 {
                 
                 	.CSEG
                 _usart_tx_isr:
0000dc 93ea      	ST   -Y,R30
0000dd 93fa      	ST   -Y,R31
0000de b7ef      	IN   R30,SREG
0000df 93ea      	ST   -Y,R30
                 ;      94 if (tx_counter0)
0000e0 d182      	RCALL SUBOPT_0x1
0000e1 30e0      	CPI  R30,0
0000e2 f409      	BRNE PC+2
0000e3 c011      	RJMP _0xA
                 ;      95    {
                 ;      96    --tx_counter0;
0000e4 d17e      	RCALL SUBOPT_0x1
0000e5 50e1      	SUBI R30,LOW(1)
0000e6 93e0 01e8 	STS  _tx_counter0,R30
                 ;      97    UDR0=tx_buffer0[tx_rd_index0];
0000e8 2dee      	MOV  R30,R14
0000e9 d177      	RCALL SUBOPT_0x0
0000ea 52e0      	SUBI R30,LOW(-_tx_buffer0)
0000eb 4ffe      	SBCI R31,HIGH(-_tx_buffer0)
0000ec 81e0      	LD   R30,Z
0000ed 93e0 00c6 	STS  198,R30
                 ;      98    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000ef 94e3      	INC  R14
0000f0 e0e8      	LDI  R30,LOW(8)
0000f1 15ee      	CP   R30,R14
0000f2 f009      	BREQ PC+2
0000f3 c001      	RJMP _0xB
0000f4 24ee      	CLR  R14
                 ;      99    };
                 _0xB:
                 _0xA:
                 ;     100 }
0000f5 91e9      	LD   R30,Y+
0000f6 bfef      	OUT  SREG,R30
0000f7 91f9      	LD   R31,Y+
0000f8 91e9      	LD   R30,Y+
0000f9 9518      	RETI
                 ;     101 
                 ;     102 #ifndef _DEBUG_TERMINAL_IO_
                 ;     103 // Write a character to the USART Transmitter buffer
                 ;     104 #define _ALTERNATE_PUTCHAR_
                 ;     105 #pragma used+
                 ;     106 void putchar(char c)
                 ;     107 {
                 _putchar:
                 ;     108 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xC:
0000fa 91a0 01e8 	LDS  R26,_tx_counter0
0000fc 30a8      	CPI  R26,LOW(0x8)
0000fd f009      	BREQ PC+2
0000fe c001      	RJMP _0xE
0000ff cffa      	RJMP _0xC
                 _0xE:
                 ;     109 #asm("cli")
000100 94f8      	cli
                 ;     110 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000101 d161      	RCALL SUBOPT_0x1
000102 30e0      	CPI  R30,0
000103 f009      	BREQ PC+2
000104 c006      	RJMP _0x10
000105 91e0 00c0 	LDS  R30,192
000107 72e0      	ANDI R30,LOW(0x20)
000108 f409      	BRNE PC+2
000109 c001      	RJMP _0x10
00010a c011      	RJMP _0xF
                 _0x10:
                 ;     111    {
                 ;     112    tx_buffer0[tx_wr_index0]=c;
00010b 2ded      	MOV  R30,R13
00010c d154      	RCALL SUBOPT_0x0
00010d 52e0      	SUBI R30,LOW(-_tx_buffer0)
00010e 4ffe      	SBCI R31,HIGH(-_tx_buffer0)
00010f 81a8      	LD   R26,Y
000110 83a0      	STD  Z+0,R26
                 ;     113    if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000111 94d3      	INC  R13
000112 e0e8      	LDI  R30,LOW(8)
000113 15ed      	CP   R30,R13
000114 f009      	BREQ PC+2
000115 c001      	RJMP _0x12
000116 24dd      	CLR  R13
                 ;     114    ++tx_counter0;
                 _0x12:
000117 d14b      	RCALL SUBOPT_0x1
000118 5fef      	SUBI R30,-LOW(1)
000119 93e0 01e8 	STS  _tx_counter0,R30
                 ;     115    }
                 ;     116 else
00011b c003      	RJMP _0x13
                 _0xF:
                 ;     117    UDR0=c;
00011c 81e8      	LD   R30,Y
00011d 93e0 00c6 	STS  198,R30
                 ;     118 #asm("sei")
                 _0x13:
00011f 9478      	sei
                 ;     119 }
000120 9621      	ADIW R28,1
000121 9508      	RET
                 ;     120 #pragma used-
                 ;     121 #endif
                 ;     122 // Timer 1 overflow interrupt service routine
                 ;     123 interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ;     124 {
                 _timer1_ovf_isr:
000122 93aa      	ST   -Y,R26
000123 93ea      	ST   -Y,R30
000124 93fa      	ST   -Y,R31
000125 b7ef      	IN   R30,SREG
000126 93ea      	ST   -Y,R30
                 ;     125 // Reinitialize Timer 1 value
                 ;     126 TCNT1H=0xFE;
000127 d13e      	RCALL SUBOPT_0x2
                 ;     127 TCNT1L=0x79;
                 ;     128 //TIMSK1=0x00;
                 ;     129 // Place your code here 
                 ;     130 timer_count_info++; 
000128 9433      	INC  R3
                 ;     131 timer_count_info1++; 
000129 9423      	INC  R2
                 ;     132 //  putchar('a');
                 ;     133 //  PORTD.2=1;
                 ;     134 //    delay_ms(100);
                 ;     135 //    PORTD.2=0;
                 ;     136   if (timer_count_info==800)
00012a 2de3      	MOV  R30,R3
00012b d141      	RCALL SUBOPT_0x3
00012c f009      	BREQ PC+2
00012d c002      	RJMP _0x14
                 ;     137   { timer_count_info=0;              
00012e 2433      	CLR  R3
                 ;     138    attendance1=0;
00012f d142      	RCALL SUBOPT_0x4
                 ;     139    attendance2=0;
                 ;     140    attendance3=0;
                 ;     141    attendance4=0;
                 ;     142    } 
                 ;     143    
                 ;     144    if (timer_count_info1==800)
                 _0x14:
000130 2de2      	MOV  R30,R2
000131 d13b      	RCALL SUBOPT_0x3
000132 f009      	BREQ PC+2
000133 c002      	RJMP _0x15
                 ;     145   { timer_count_info1=0;              
000134 2422      	CLR  R2
                 ;     146    attendance1=0;
000135 d13c      	RCALL SUBOPT_0x4
                 ;     147    attendance2=0;
                 ;     148    attendance3=0;
                 ;     149    attendance4=0;
                 ;     150    }
                 ;     151  
                 ;     152  // TIMSK1=0x01;
                 ;     153 }
                 _0x15:
000136 91e9      	LD   R30,Y+
000137 bfef      	OUT  SREG,R30
000138 91f9      	LD   R31,Y+
000139 91e9      	LD   R30,Y+
00013a 91a9      	LD   R26,Y+
00013b 9518      	RETI
                 ;     154 // Standard Input/Output functions
                 ;     155 #include <stdio.h>
                 ;     156 
                 ;     157 // Declare your global variables here
                 ;     158 
                 ;     159 void main(void)
                 ;     160 {
                 _main:
                 ;     161 // Declare your local variables here
                 ;     162  unsigned char present[]="PRESENT",absent[]="ABSENT ";
                 ;     163 // Crystal Oscillator division factor: 1
                 ;     164 #pragma optsize-
                 ;     165 CLKPR=0x80;
00013c 9760      	SBIW R28,16
00013d e180      	LDI  R24,16
00013e e0a0      	LDI  R26,LOW(0)
00013f e0b0      	LDI  R27,HIGH(0)
000140 e3e4      	LDI  R30,LOW(_0x16*2)
000141 e0f0      	LDI  R31,HIGH(_0x16*2)
000142 d194      	RCALL __INITLOCB
                 ;	present -> Y+8
                 ;	absent -> Y+0
000143 e8e0      	LDI  R30,LOW(128)
000144 93e0 0061 	STS  97,R30
                 ;     166 CLKPR=0x00;
000146 e0e0      	LDI  R30,LOW(0)
000147 93e0 0061 	STS  97,R30
                 ;     167 #ifdef _OPTIMIZE_SIZE_
                 ;     168 #pragma optsize+
                 ;     169 #endif
                 ;     170 
                 ;     171 // Input/Output Ports initialization
                 ;     172 // Port B initialization
                 ;     173 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     174 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     175 PORTB=0x00;
000149 b9e5      	OUT  0x5,R30
                 ;     176 DDRB=0x07;
00014a e0e7      	LDI  R30,LOW(7)
00014b b9e4      	OUT  0x4,R30
                 ;     177 
                 ;     178 // Port C initialization
                 ;     179 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     180 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     181 PORTC=0x00;
00014c e0e0      	LDI  R30,LOW(0)
00014d b9e8      	OUT  0x8,R30
                 ;     182 DDRC=0x00;
00014e b9e7      	OUT  0x7,R30
                 ;     183 
                 ;     184 // Port D initialization
                 ;     185 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     186 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     187 PORTD=0x04;
00014f e0e4      	LDI  R30,LOW(4)
000150 b9eb      	OUT  0xB,R30
                 ;     188 DDRD=0xf0;
000151 efe0      	LDI  R30,LOW(240)
000152 b9ea      	OUT  0xA,R30
                 ;     189 
                 ;     190 // Timer/Counter 0 initialization
                 ;     191 // Clock source: System Clock
                 ;     192 // Clock value: Timer 0 Stopped
                 ;     193 // Mode: Normal top=FFh
                 ;     194 // OC0A output: Disconnected
                 ;     195 // OC0B output: Disconnected
                 ;     196 TCCR0A=0x00;
000153 e0e0      	LDI  R30,LOW(0)
000154 bde4      	OUT  0x24,R30
                 ;     197 TCCR0B=0x00;
000155 bde5      	OUT  0x25,R30
                 ;     198 TCNT0=0x00;
000156 bde6      	OUT  0x26,R30
                 ;     199 OCR0A=0x00;
000157 bde7      	OUT  0x27,R30
                 ;     200 OCR0B=0x00;
000158 bde8      	OUT  0x28,R30
                 ;     201 
                 ;     202 // Timer/Counter 1 initialization
                 ;     203 // Clock source: System Clock
                 ;     204 // Clock value: 3.906 kHz
                 ;     205 // Mode: Normal top=FFFFh
                 ;     206 // OC1A output: Discon.
                 ;     207 // OC1B output: Discon.
                 ;     208 // Noise Canceler: Off
                 ;     209 // Input Capture on Falling Edge
                 ;     210 // Timer 1 Overflow Interrupt: On
                 ;     211 // Input Capture Interrupt: Off
                 ;     212 // Compare A Match Interrupt: Off
                 ;     213 // Compare B Match Interrupt: Off
                 ;     214 TCCR1A=0x00;
000159 93e0 0080 	STS  128,R30
                 ;     215 TCCR1B=0x05;
00015b e0e5      	LDI  R30,LOW(5)
00015c 93e0 0081 	STS  129,R30
                 ;     216 TCNT1H=0xFE;
00015e d107      	RCALL SUBOPT_0x2
                 ;     217 TCNT1L=0x79;
                 ;     218 ICR1H=0x00;
00015f e0e0      	LDI  R30,LOW(0)
000160 93e0 0087 	STS  135,R30
                 ;     219 ICR1L=0x00;
000162 93e0 0086 	STS  134,R30
                 ;     220 OCR1AH=0x00;
000164 93e0 0089 	STS  137,R30
                 ;     221 OCR1AL=0x00;
000166 93e0 0088 	STS  136,R30
                 ;     222 OCR1BH=0x00;
000168 93e0 008b 	STS  139,R30
                 ;     223 OCR1BL=0x00;
00016a 93e0 008a 	STS  138,R30
                 ;     224 
                 ;     225 // Timer/Counter 2 initialization
                 ;     226 // Clock source: System Clock
                 ;     227 // Clock value: Timer 2 Stopped
                 ;     228 // Mode: Normal top=FFh
                 ;     229 // OC2A output: Disconnected
                 ;     230 // OC2B output: Disconnected
                 ;     231 ASSR=0x00;
00016c 93e0 00b6 	STS  182,R30
                 ;     232 TCCR2A=0x00;
00016e 93e0 00b0 	STS  176,R30
                 ;     233 TCCR2B=0x00;
000170 93e0 00b1 	STS  177,R30
                 ;     234 TCNT2=0x00;
000172 93e0 00b2 	STS  178,R30
                 ;     235 OCR2A=0x00;
000174 93e0 00b3 	STS  179,R30
                 ;     236 OCR2B=0x00;
000176 93e0 00b4 	STS  180,R30
                 ;     237 
                 ;     238 
                 ;     239 
                 ;     240 // Timer/Counter 0 Interrupt(s) initialization
                 ;     241 TIMSK0=0x00;
000178 93e0 006e 	STS  110,R30
                 ;     242 // Timer/Counter 1 Interrupt(s) initialization
                 ;     243 TIMSK1=0x00;
00017a d0fc      	RCALL SUBOPT_0x5
                 ;     244 // Timer/Counter 2 Interrupt(s) initialization
                 ;     245 TIMSK2=0x00;
00017b e0e0      	LDI  R30,LOW(0)
00017c 93e0 0070 	STS  112,R30
                 ;     246 
                 ;     247 // USART initialization
                 ;     248 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ;     249 // USART Receiver: On
                 ;     250 // USART Transmitter: On
                 ;     251 // USART0 Mode: Asynchronous
                 ;     252 // USART Baud rate: 9600
                 ;     253 UCSR0A=0x00;
00017e 93e0 00c0 	STS  192,R30
                 ;     254 UCSR0B=0xD8;
000180 ede8      	LDI  R30,LOW(216)
000181 93e0 00c1 	STS  193,R30
                 ;     255 UCSR0C=0x06;
000183 e0e6      	LDI  R30,LOW(6)
000184 93e0 00c2 	STS  194,R30
                 ;     256 UBRR0H=0x00;
000186 e0e0      	LDI  R30,LOW(0)
000187 93e0 00c5 	STS  197,R30
                 ;     257 UBRR0L=0x19;
000189 e1e9      	LDI  R30,LOW(25)
00018a 93e0 00c4 	STS  196,R30
                 ;     258 
                 ;     259 
                 ;     260 
                 ;     261 
                 ;     262 // Global enable interrupts
                 ;     263 #asm("sei")
00018c 9478      	sei
                 ;     264 lcd_init();
00018d d069      	RCALL _lcd_init
                 ;     265  clear_lcd();
00018e d0eb      	RCALL SUBOPT_0x6
                 ;     266  lcd_cmd(0x80);
                 ;     267  lcd_puts(msg);
00018f e8e8      	LDI  R30,LOW(_msg)
000190 e0f1      	LDI  R31,HIGH(_msg)
000191 d0ec      	RCALL SUBOPT_0x7
                 ;     268  //delay_ms(1000);
                 ;     269  lcd_cmd(0xC0) ;
000192 d0ee      	RCALL SUBOPT_0x8
                 ;     270  lcd_puts(msg1);
000193 e9e8      	LDI  R30,LOW(_msg1)
000194 e0f1      	LDI  R31,HIGH(_msg1)
000195 d0e8      	RCALL SUBOPT_0x7
                 ;     271  delay_ms(3000); 
000196 ebe8      	LDI  R30,LOW(3000)
000197 e0fb      	LDI  R31,HIGH(3000)
000198 d0eb      	RCALL SUBOPT_0x9
                 ;     272   clear_lcd();
000199 d0e0      	RCALL SUBOPT_0x6
                 ;     273    lcd_cmd(0x80) ;
                 ;     274    
                 ;     275 while (1)
                 _0x17:
                 ;     276       {
                 ;     277       // Place your code here
                 ;     278        if(rx_counter0>0)
00019a e0e0      	LDI  R30,LOW(0)
00019b 15ec      	CP   R30,R12
00019c f008      	BRLO PC+2
00019d c02a      	RJMP _0x1A
                 ;     279          {
                 ;     280          code = getchar();
00019e df27      	RCALL _getchar
00019f 2e9e      	MOV  R9,R30
                 ;     281          putchar(code);
0001a0 929a      	ST   -Y,R9
0001a1 df58      	RCALL _putchar
                 ;     282       if(code=='@')
0001a2 e4e0      	LDI  R30,LOW(64)
0001a3 15e9      	CP   R30,R9
0001a4 f009      	BREQ PC+2
0001a5 c006      	RJMP _0x1B
                 ;     283       {  code=0;
0001a6 2499      	CLR  R9
                 ;     284       attendance1=1;  
0001a7 e0e1      	LDI  R30,LOW(1)
0001a8 2e4e      	MOV  R4,R30
                 ;     285       timer_count_info=0;
0001a9 2433      	CLR  R3
                 ;     286       TCNT1H=0xFE;
0001aa d0bb      	RCALL SUBOPT_0x2
                 ;     287       TCNT1L=0x79;
                 ;     288       TIMSK1=0x01;
0001ab d0db      	RCALL SUBOPT_0xA
                 ;     289       } 
                 ;     290       
                 ;     291        if(code=='#')
                 _0x1B:
0001ac e2e3      	LDI  R30,LOW(35)
0001ad 15e9      	CP   R30,R9
0001ae f009      	BREQ PC+2
0001af c006      	RJMP _0x1C
                 ;     292       { code=0;
0001b0 2499      	CLR  R9
                 ;     293       attendance2=1;
0001b1 e0e1      	LDI  R30,LOW(1)
0001b2 2e5e      	MOV  R5,R30
                 ;     294       timer_count_info1=0; 
0001b3 2422      	CLR  R2
                 ;     295       TCNT1H=0xFE;
0001b4 d0b1      	RCALL SUBOPT_0x2
                 ;     296       TCNT1L=0x79;
                 ;     297       TIMSK1=0x01;
0001b5 d0d1      	RCALL SUBOPT_0xA
                 ;     298       }  
                 ;     299        if(code=='$')
                 _0x1C:
0001b6 e2e4      	LDI  R30,LOW(36)
0001b7 15e9      	CP   R30,R9
0001b8 f009      	BREQ PC+2
0001b9 c005      	RJMP _0x1D
                 ;     300       {
                 ;     301       attendance3=1;
0001ba e0e1      	LDI  R30,LOW(1)
0001bb 2e6e      	MOV  R6,R30
                 ;     302       timer_count_info=0;
0001bc 2433      	CLR  R3
                 ;     303        TIMSK1=0x01;
0001bd d0c9      	RCALL SUBOPT_0xA
                 ;     304        TCNT1H=0xFE;
0001be d0a7      	RCALL SUBOPT_0x2
                 ;     305        TCNT1L=0x79;
                 ;     306       } 
                 ;     307       
                 ;     308        if(code=='*')
                 _0x1D:
0001bf e2ea      	LDI  R30,LOW(42)
0001c0 15e9      	CP   R30,R9
0001c1 f009      	BREQ PC+2
0001c2 c005      	RJMP _0x1E
                 ;     309       {
                 ;     310       attendance4=1; 
0001c3 e0e1      	LDI  R30,LOW(1)
0001c4 2e7e      	MOV  R7,R30
                 ;     311       timer_count_info=0;
0001c5 2433      	CLR  R3
                 ;     312       TIMSK1=0x01;
0001c6 d0c0      	RCALL SUBOPT_0xA
                 ;     313       TCNT1H=0xFE;
0001c7 d09e      	RCALL SUBOPT_0x2
                 ;     314 TCNT1L=0x79;
                 ;     315       }
                 ;     316                          
                 ;     317          }
                 _0x1E:
                 ;     318        
                 ;     319 //          lcd_cmd(0x80) ;
                 ;     320 //          lcd_puts(msg2);
                 ;     321 //          lcd_cmd(0xC0) ;
                 ;     322 //          lcd_puts(msg3);
                 ;     323         // if(display_atd==1)
                 ;     324          {
                 _0x1A:
                 ;     325             display_atd=0;
0001c8 2488      	CLR  R8
                 ;     326            if(attendance1==1)
0001c9 e0e1      	LDI  R30,LOW(1)
0001ca 15e4      	CP   R30,R4
0001cb f009      	BREQ PC+2
0001cc c007      	RJMP _0x1F
                 ;     327            {
                 ;     328              lcd_cmd(0x80) ;
0001cd d0bb      	RCALL SUBOPT_0xB
                 ;     329          lcd_puts(r);
                 ;     330           lcd_data(' ',0);
0001ce d0c0      	RCALL SUBOPT_0xC
                 ;     331          lcd_data(':',0); 
0001cf d0c4      	RCALL SUBOPT_0xD
                 ;     332            lcd_data(' ',0);
                 ;     333            lcd_puts(present);
0001d0 01fe      	MOVW R30,R28
0001d1 9638      	ADIW R30,8
0001d2 d0ab      	RCALL SUBOPT_0x7
                 ;     334            
                 ;     335            }
                 ;     336            else
0001d3 c005      	RJMP _0x20
                 _0x1F:
                 ;     337          {
                 ;     338              lcd_cmd(0x80) ;
0001d4 d0b4      	RCALL SUBOPT_0xB
                 ;     339          lcd_puts(r);
                 ;     340           lcd_data(' ',0);
0001d5 d0b9      	RCALL SUBOPT_0xC
                 ;     341          lcd_data(':',0); 
0001d6 d0bd      	RCALL SUBOPT_0xD
                 ;     342            lcd_data(' ',0);
                 ;     343            lcd_puts(absent);
0001d7 01fe      	MOVW R30,R28
0001d8 d0a5      	RCALL SUBOPT_0x7
                 ;     344            
                 ;     345            } 
                 _0x20:
                 ;     346            if(attendance2==1)
0001d9 e0e1      	LDI  R30,LOW(1)
0001da 15e5      	CP   R30,R5
0001db f009      	BREQ PC+2
0001dc c00a      	RJMP _0x21
                 ;     347            {
                 ;     348              lcd_cmd(0xc0) ;
0001dd d0a3      	RCALL SUBOPT_0x8
                 ;     349          lcd_puts(b);
0001de eced      	LDI  R30,LOW(_b)
0001df e0f1      	LDI  R31,HIGH(_b)
0001e0 d09d      	RCALL SUBOPT_0x7
                 ;     350           lcd_data(' ',0);
0001e1 d0ad      	RCALL SUBOPT_0xC
                 ;     351          lcd_data(':',0); 
0001e2 d0b1      	RCALL SUBOPT_0xD
                 ;     352            lcd_data(' ',0);
                 ;     353            lcd_puts(present);
0001e3 01fe      	MOVW R30,R28
0001e4 9638      	ADIW R30,8
0001e5 d098      	RCALL SUBOPT_0x7
                 ;     354            
                 ;     355            }
                 ;     356            else
0001e6 c008      	RJMP _0x22
                 _0x21:
                 ;     357          {
                 ;     358              lcd_cmd(0xc0) ;
0001e7 d099      	RCALL SUBOPT_0x8
                 ;     359          lcd_puts(b);
0001e8 eced      	LDI  R30,LOW(_b)
0001e9 e0f1      	LDI  R31,HIGH(_b)
0001ea d093      	RCALL SUBOPT_0x7
                 ;     360           lcd_data(' ',0);
0001eb d0a3      	RCALL SUBOPT_0xC
                 ;     361          lcd_data(':',0); 
0001ec d0a7      	RCALL SUBOPT_0xD
                 ;     362            lcd_data(' ',0);
                 ;     363            lcd_puts(absent);
0001ed 01fe      	MOVW R30,R28
0001ee d08f      	RCALL SUBOPT_0x7
                 ;     364            
                 ;     365            }
                 _0x22:
                 ;     366           //  delay_ms(3000);
                 ;     367          // clear_lcd();
                 ;     368          
                 ;     369          }
                 ;     370          
                 ;     371         
                 ;     372       };
0001ef cfaa      	RJMP _0x17
                 _0x19:
                 ;     373 } 
0001f0 9660      	ADIW R28,16
                 _0x23:
0001f1 cfff      	RJMP _0x23
                 ;     374 
                 ;     375 
                 ;     376  #include <mega48.h>         
                 ;     377 //#include <prototype.h> 
                 ;     378 #include <lcd16x1.h> 
                 ;     379 #include <stdlib.h>
                 ;     380 #include <stdio.h>  
                 ;     381 //#include<prototype.h>     
                 ;     382 //#define INT0_PIN PIND.2         //int0 pin PD.2
                 ;     383 //#define INT1_PIN PIND.3         //int1 pin PD.3
                 ;     384 
                 ;     385 #define RS PORTB.0
                 ;     386 #define RW PORTB.1    //lcd defines
                 ;     387 #define EN PORTB.2  
                 ;     388                         
                 ;     389 
                 ;     390 
                 ;     391 
                 ;     392                
                 ;     393 
                 ;     394 //function to clear the lcd & start from first row first column onwards       
                 ;     395 void clear_lcd(void)
                 ;     396 {
                 _clear_lcd:
                 ;     397        lcd_cmd(0x01);
0001f2 e0e1      	LDI  R30,LOW(1)
0001f3 d0a6      	RCALL SUBOPT_0xE
                 ;     398        //lcd_cmd(0x80);   //clear screen n start from fist line first column
                 ;     399        lcd_cmd(0x06);     //incremental cursor
0001f4 e0e6      	LDI  R30,LOW(6)
0001f5 d0a4      	RCALL SUBOPT_0xE
                 ;     400 }
0001f6 9508      	RET
                 ;     401 
                 ;     402 //lcd initialization function for 4 datalines    
                 ;     403  void lcd_init(void)
                 ;     404  {
                 _lcd_init:
                 ;     405         delay_ms(15);               //startup delay
0001f7 e0ef      	LDI  R30,LOW(15)
0001f8 e0f0      	LDI  R31,HIGH(15)
0001f9 d08a      	RCALL SUBOPT_0x9
                 ;     406                   lcd_cmd(0x03);
0001fa e0e3      	LDI  R30,LOW(3)
0001fb d09e      	RCALL SUBOPT_0xE
                 ;     407         delay_ms(5);     
0001fc e0e5      	LDI  R30,LOW(5)
0001fd e0f0      	LDI  R31,HIGH(5)
0001fe d085      	RCALL SUBOPT_0x9
                 ;     408                   lcd_cmd(0x03);
0001ff e0e3      	LDI  R30,LOW(3)
000200 d099      	RCALL SUBOPT_0xE
                 ;     409         delay_us(160);     
000201 d09a      	RCALL SUBOPT_0xF
                 ;     410                   lcd_cmd(0x03);
000202 e0e3      	LDI  R30,LOW(3)
000203 d096      	RCALL SUBOPT_0xE
                 ;     411         delay_us(160);            
000204 d097      	RCALL SUBOPT_0xF
                 ;     412                   lcd_cmd(0x02);
000205 e0e2      	LDI  R30,LOW(2)
000206 d093      	RCALL SUBOPT_0xE
                 ;     413        delay_us(160);  
000207 d094      	RCALL SUBOPT_0xF
                 ;     414                   lcd_cmd(0x28);         //4 bit data , 5*7, 2 line..   //the abouve cmds are necessary
000208 e2e8      	LDI  R30,LOW(40)
000209 d090      	RCALL SUBOPT_0xE
                 ;     415        delay_ms(100);                    
00020a e6e4      	LDI  R30,LOW(100)
00020b e0f0      	LDI  R31,HIGH(100)
00020c d077      	RCALL SUBOPT_0x9
                 ;     416                   lcd_cmd(0x60);         // set CGRAM addr
00020d e6e0      	LDI  R30,LOW(96)
00020e d08b      	RCALL SUBOPT_0xE
                 ;     417        delay_ms(100);           
00020f e6e4      	LDI  R30,LOW(100)
000210 e0f0      	LDI  R31,HIGH(100)
000211 d072      	RCALL SUBOPT_0x9
                 ;     418          lcd_cmd(0x0C); 
000212 e0ec      	LDI  R30,LOW(12)
000213 d086      	RCALL SUBOPT_0xE
                 ;     419        delay_ms(1);                          
000214 d08b      	RCALL SUBOPT_0x10
                 ;     420                   lcd_cmd(0x06);       //increment cursor no shift
000215 e0e6      	LDI  R30,LOW(6)
000216 d083      	RCALL SUBOPT_0xE
                 ;     421        delay_ms(1);           
000217 d088      	RCALL SUBOPT_0x10
                 ;     422                   lcd_cmd(0x90);       // 1st column 1st char
000218 e9e0      	LDI  R30,LOW(144)
000219 d080      	RCALL SUBOPT_0xE
                 ;     423         delay_ms(1);                                        
00021a d085      	RCALL SUBOPT_0x10
                 ;     424                   lcd_cmd(0x01);       //clear lcd
00021b e0e1      	LDI  R30,LOW(1)
00021c d07d      	RCALL SUBOPT_0xE
                 ;     425         delay_ms(2);                              
00021d e0e2      	LDI  R30,LOW(2)
00021e e0f0      	LDI  R31,HIGH(2)
00021f d064      	RCALL SUBOPT_0x9
                 ;     426   }                                 
000220 9508      	RET
                 ;     427 
                 ;     428 //to send lcd commands
                 ;     429 void lcd_cmd(unsigned char inst){
                 _lcd_cmd:
                 ;     430 
                 ;     431        unsigned char lsb=0,msb=0;
                 ;     432         lsb=inst&0x0F;        //split msb n lsb nibbles
000221 d0aa      	RCALL __SAVELOCR2
                 ;	inst -> Y+2
                 ;	lsb -> R16
                 ;	msb -> R17
000222 e000      	LDI  R16,0
000223 e010      	LDI  R17,0
000224 81ea      	LDD  R30,Y+2
000225 70ef      	ANDI R30,LOW(0xF)
000226 2f0e      	MOV  R16,R30
                 ;     433         msb=inst>>4; 
000227 81ea      	LDD  R30,Y+2
000228 95e2      	SWAP R30
000229 70ef      	ANDI R30,0xF
00022a 2f1e      	MOV  R17,R30
                 ;     434         msb&=0x0F;   
00022b 701f      	ANDI R17,LOW(15)
                 ;     435         lsb=lsb&0X0F;
00022c 700f      	ANDI R16,LOW(15)
                 ;     436         msb=msb<<4;
00022d 9512      	SWAP R17
00022e 7f10      	ANDI R17,0xF0
                 ;     437         lsb=lsb<<4;
00022f 9502      	SWAP R16
000230 7f00      	ANDI R16,0xF0
                 ;     438         delay_us(500);            //busy check duration       500
000231 ef84
000232 e091
000233 9701
000234 f7f1      	__DELAY_USW 500
                 ;     439         RS=0;
000235 9828      	CBI  0x5,0
                 ;     440         RW=0;    
000236 d06c      	RCALL SUBOPT_0x11
                 ;     441         EN=1;     
                 ;     442         PORTD&=0x0F; 
                 ;     443         PORTD|=msb; 
                 ;     444         delay_us(5);         //6 nops       changed from 10u to 5u
                 ;     445         EN=0;
                 ;     446         delay_us(5);         //6 nops
                 ;     447         EN=1;
                 ;     448         PORTD&=0x0F;        //sending lsb now       
                 ;     449         PORTD|=lsb; 
                 ;     450         delay_us(5);         //6 nops
                 ;     451         EN=0;
                 ;     452      }   
000237 d099      	RCALL __LOADLOCR2
000238 9623      	ADIW R28,3
000239 9508      	RET
                 ;     453                
                 ;     454 //function to send data to lcd
                 ;     455  void lcd_data(unsigned char data1,unsigned char type)
                 ;     456  {      
                 _lcd_data:
                 ;     457       unsigned char lsbc,msbc,temp,a; 
                 ;     458       type=a;
00023a d08f      	RCALL __SAVELOCR4
                 ;	data1 -> Y+5
                 ;	type -> Y+4
                 ;	lsbc -> R16
                 ;	msbc -> R17
                 ;	temp -> R18
                 ;	a -> R19
00023b 833c      	STD  Y+4,R19
                 ;     459       temp=0;lsbc=0;msbc=0;
00023c e020      	LDI  R18,LOW(0)
00023d e000      	LDI  R16,LOW(0)
00023e e010      	LDI  R17,LOW(0)
                 ;     460       msbc=data1&0xF0;      //msb n lsb split
00023f 81ed      	LDD  R30,Y+5
000240 7fe0      	ANDI R30,LOW(0xF0)
000241 2f1e      	MOV  R17,R30
                 ;     461       lsbc=data1<<4;
000242 81ed      	LDD  R30,Y+5
000243 95e2      	SWAP R30
000244 7fe0      	ANDI R30,0xF0
000245 2f0e      	MOV  R16,R30
                 ;     462       delay_us(600);            //busy check duration       prev 600
000246 e588
000247 e092
000248 9701
000249 f7f1      	__DELAY_USW 600
                 ;     463       RS=1;
00024a 9a28      	SBI  0x5,0
                 ;     464       RW=0;     
00024b d057      	RCALL SUBOPT_0x11
                 ;     465       EN=1;
                 ;     466       PORTD&=0x0F; 
                 ;     467       PORTD|=msbc;         // this being moved to the lsbbits of port instead of msb...
                 ;     468       delay_us(5);        
                 ;     469       EN=0 ;                   
                 ;     470       delay_us(5);        
                 ;     471       EN=1;
                 ;     472       PORTD&=0x0F;
                 ;     473       PORTD|=lsbc;        
                 ;     474       delay_us(5);        
                 ;     475       EN=0;     
                 ;     476 } 
00024c d082      	RCALL __LOADLOCR4
00024d 9626      	ADIW R28,6
00024e 9508      	RET
                 ;     477               
                 ;     478 
                 ;     479 //function to put string onto lcd     
                 ;     480 void lcd_puts(unsigned char *str)
                 ;     481 {
                 _lcd_puts:
                 ;     482   while(*str !='\0') 
                 ;	*str -> Y+0
                 _0x24:
00024f 81a8      	LD   R26,Y
000250 81b9      	LDD  R27,Y+1
000251 91ec      	LD   R30,X
000252 30e0      	CPI  R30,0
000253 f409      	BRNE PC+2
000254 c00a      	RJMP _0x26
                 ;     483          {
                 ;     484            lcd_data(*str,1);
000255 93ea      	ST   -Y,R30
000256 e0e1      	LDI  R30,LOW(1)
000257 93ea      	ST   -Y,R30
000258 dfe1      	RCALL _lcd_data
                 ;     485              *str++;
000259 81a8      	LD   R26,Y
00025a 81b9      	LDD  R27,Y+1
00025b 91ed      	LD   R30,X+
00025c 83a8      	ST   Y,R26
00025d 83b9      	STD  Y+1,R27
                 ;     486           }
00025e cff0      	RJMP _0x24
                 _0x26:
                 ;     487 }
00025f 9622      	ADIW R28,2
000260 9508      	RET
                 ;     488 
                 
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000261 e0f0      	LDI  R31,0
000262 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000263 91e0 01e8 	LDS  R30,_tx_counter0
000265 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x2:
000266 efee      	LDI  R30,LOW(254)
000267 93e0 0085 	STS  133,R30
000269 e7e9      	LDI  R30,LOW(121)
00026a 93e0 0084 	STS  132,R30
00026c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00026d dff3      	RCALL SUBOPT_0x0
00026e 32e0      	CPI  R30,LOW(0x320)
00026f e0a3      	LDI  R26,HIGH(0x320)
000270 07fa      	CPC  R31,R26
000271 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000272 2444      	CLR  R4
000273 2455      	CLR  R5
000274 2466      	CLR  R6
000275 2477      	CLR  R7
000276 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000277 93e0 006f 	STS  111,R30
000279 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00027a df77      	RCALL _clear_lcd
00027b e8e0      	LDI  R30,LOW(128)
00027c 93ea      	ST   -Y,R30
00027d cfa3      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x7:
00027e 93fa      	ST   -Y,R31
00027f 93ea      	ST   -Y,R30
000280 cfce      	RJMP _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000281 ece0      	LDI  R30,LOW(192)
000282 93ea      	ST   -Y,R30
000283 cf9d      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9:
000284 93fa      	ST   -Y,R31
000285 93ea      	ST   -Y,R30
000286 c037      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000287 e0e1      	LDI  R30,LOW(1)
000288 cfee      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000289 e8e0      	LDI  R30,LOW(128)
00028a 93ea      	ST   -Y,R30
00028b df95      	RCALL _lcd_cmd
00028c ece5      	LDI  R30,LOW(_r)
00028d e0f1      	LDI  R31,HIGH(_r)
00028e cfef      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0xC:
00028f e2e0      	LDI  R30,LOW(32)
000290 93ea      	ST   -Y,R30
000291 e0e0      	LDI  R30,LOW(0)
000292 93ea      	ST   -Y,R30
000293 cfa6      	RJMP _lcd_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
000294 e3ea      	LDI  R30,LOW(58)
000295 93ea      	ST   -Y,R30
000296 e0e0      	LDI  R30,LOW(0)
000297 93ea      	ST   -Y,R30
000298 dfa1      	RCALL _lcd_data
000299 cff5      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
00029a 93ea      	ST   -Y,R30
00029b cf85      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
00029c ed85
00029d 958a
00029e f7f1      	__DELAY_USB 213
00029f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
0002a0 e0e1      	LDI  R30,LOW(1)
0002a1 e0f0      	LDI  R31,HIGH(1)
0002a2 cfe1      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x11:
0002a3 9829      	CBI  0x5,1
0002a4 9a2a      	SBI  0x5,2
0002a5 b1eb      	IN   R30,0xB
0002a6 70ef      	ANDI R30,LOW(0xF)
0002a7 b9eb      	OUT  0xB,R30
0002a8 b1eb      	IN   R30,0xB
0002a9 2be1      	OR   R30,R17
0002aa b9eb      	OUT  0xB,R30
0002ab e087
0002ac 958a
0002ad f7f1      	__DELAY_USB 7
0002ae 982a      	CBI  0x5,2
0002af e087
0002b0 958a
0002b1 f7f1      	__DELAY_USB 7
0002b2 9a2a      	SBI  0x5,2
0002b3 b1eb      	IN   R30,0xB
0002b4 70ef      	ANDI R30,LOW(0xF)
0002b5 b9eb      	OUT  0xB,R30
0002b6 b1eb      	IN   R30,0xB
0002b7 2be0      	OR   R30,R16
0002b8 b9eb      	OUT  0xB,R30
0002b9 e087
0002ba 958a
0002bb f7f1      	__DELAY_USB 7
0002bc 982a      	CBI  0x5,2
0002bd 9508      	RET
                 
                 _delay_ms:
0002be 91e9      	ld   r30,y+
0002bf 91f9      	ld   r31,y+
0002c0 9630      	adiw r30,0
0002c1 f039      	breq __delay_ms1
                 __delay_ms0:
0002c2 ee88
0002c3 e093
0002c4 9701
0002c5 f7f1      	__DELAY_USW 0x3E8
0002c6 95a8      	wdr
0002c7 9731      	sbiw r30,1
0002c8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002c9 9508      	ret
                 
                 __SAVELOCR4:
0002ca 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002cb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002cc 931a      	ST   -Y,R17
0002cd 930a      	ST   -Y,R16
0002ce 9508      	RET
                 
                 __LOADLOCR4:
0002cf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002d0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002d1 8119      	LDD  R17,Y+1
0002d2 8108      	LD   R16,Y
0002d3 9508      	RET
                 
                 __LOADLOCR2P:
0002d4 9109      	LD   R16,Y+
0002d5 9119      	LD   R17,Y+
0002d6 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0002d7 0fac      	ADD R26,R28
0002d8 1fbd      	ADC R27,R29
                 __INITLOC0:
0002d9 9005      	LPM  R0,Z+
0002da 920d      	ST   X+,R0
0002db 958a      	DEC  R24
0002dc f7e1      	BRNE __INITLOC0
0002dd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48 register use summary:
r0 :   6 r1 :   1 r2 :   4 r3 :   6 r4 :   3 r5 :   3 r6 :   2 r7 :   2 
r8 :   1 r9 :   8 r10:   4 r11:   4 r12:   6 r13:   4 r14:   4 r15:   0 
r16:  17 r17:  13 r18:   3 r19:   3 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  23 r27:  12 r28:  12 r29:   2 r30: 233 r31:  28 
x  :   7 y  :  64 z  :  11 
Registers used: 31 out of 35 (88.6%)

ATmega48 instruction use summary:
adc   :   1 add   :   1 adiw  :   8 and   :   0 andi  :  12 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :  19 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 
brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   4 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 
cln   :   0 clr   :  20 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :  12 cpc   :   1 cpi   :   5 cpse  :   0 dec   :   7 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   7 ld    :  25 ldd   :   9 ldi   : 116 lds   :   5 
lpm   :   8 lsl   :   0 lsr   :   0 mov   :  17 movw  :   7 mul   :   0 
muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   0 
out   :  26 pop   :   0 push  :   0 rcall :  86 ret   :  20 reti  :   3 
rjmp  :  68 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 sbi   :   4 
sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 sbrs  :   0 
sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  37 
std   :   3 sts   :  32 sub   :   0 subi  :   6 swap  :   4 tst   :   1 
wdr   :   2 
Instructions used: 41 out of 109 (37.6%)

ATmega48 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005bc   1316    152   1468    4096  35.8%
[.dseg] 0x000100 0x0001e9      0    105    105     512  20.5%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 13 warnings
